{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\cristianamateas\\\\Desktop\\\\complete-react-developer\\\\module-3-react-basics\\\\monsters-rolodex\\\\src\\\\App.js\";\nimport { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor() {\n    // console.log('constructor');\n    super(); // ie: initial state\n\n    this.state = {\n      monsters: []\n    };\n  }\n\n  componentDidMount() {\n    // console.log('componentDidMount');\n    fetch('https://jsonplaceholder.typicode.com/users').then(response => response.json()) // uses what was returned from the previous line of code and parses the text body into a .json format\n    // .then(users => console.log(users)) // after the text was parse, it can then console.log it\n    .then(users => {\n      this.setState(() => {\n        return {\n          monsters: users\n        };\n      }, () => {// console.log(this.state);\n      });\n    });\n  }\n\n  render() {\n    // console.log('render');\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"search-box\",\n        type: \"search\",\n        placeholder: \"search monsters\",\n        onChange: event => {\n          // console.log(event.target.value)\n          let searchValue = event.target.value;\n          let monsters = this.state.monsters;\n          let filteredMonsters = monsters.filter(monster => monster.name.includes(searchValue));\n          this.setState(() => {\n            return {\n              monsters: filteredMonsters\n            };\n          }, () => {\n            console.log('Filtering Successful');\n          });\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), this.state.monsters.map(monster => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: monster.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 17\n          }, this)\n        }, monster.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 15\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"names":["Component","logo","App","constructor","state","monsters","componentDidMount","fetch","then","response","json","users","setState","render","event","searchValue","target","value","filteredMonsters","filter","monster","name","includes","console","log","map","id"],"sources":["C:/Users/cristianamateas/Desktop/complete-react-developer/module-3-react-basics/monsters-rolodex/src/App.js"],"sourcesContent":["import { Component } from 'react';\n\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n\n  constructor() {\n    // console.log('constructor');\n    super();\n\n    // ie: initial state\n    this.state = {\n      monsters: [],\n    };\n  };\n\n  componentDidMount() {\n    // console.log('componentDidMount');\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json()) // uses what was returned from the previous line of code and parses the text body into a .json format\n    // .then(users => console.log(users)) // after the text was parse, it can then console.log it\n    .then(users => {\n      this.setState(\n        () => {\n          return {monsters: users};\n        }, \n        () => {\n          // console.log(this.state);\n        }\n      )\n    })\n  };\n\n  render() {\n    // console.log('render');\n    return (\n      <div className=\"App\">\n        <input className='search-box' type='search' placeholder='search monsters' onChange={event => {\n          // console.log(event.target.value)\n          let searchValue = event.target.value;\n          let monsters = this.state.monsters;\n          let filteredMonsters = monsters.filter(monster => monster.name.includes(searchValue));\n          this.setState(() => {\n            return {monsters: filteredMonsters};\n          },\n          () => {\n            console.log('Filtering Successful');\n          });\n        }}/>\n        {\n          this.state.monsters.map(monster => {\n            return (\n              <div key={monster.id}>\n                <h1>{monster.name}</h1>\n              </div>\n            );\n          })\n        }\n      </div>\n    );\n  };\n\n}\n\nexport default App;"],"mappings":";AAAA,SAASA,SAAT,QAA0B,OAA1B;AAEA,OAAOC,IAAP,MAAiB,YAAjB;AACA,OAAO,WAAP;;;AAEA,MAAMC,GAAN,SAAkBF,SAAlB,CAA4B;EAE1BG,WAAW,GAAG;IACZ;IACA,QAFY,CAIZ;;IACA,KAAKC,KAAL,GAAa;MACXC,QAAQ,EAAE;IADC,CAAb;EAGD;;EAEDC,iBAAiB,GAAG;IAClB;IACAC,KAAK,CAAC,4CAAD,CAAL,CACCC,IADD,CACMC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADlB,EACmC;IACnC;IAFA,CAGCF,IAHD,CAGMG,KAAK,IAAI;MACb,KAAKC,QAAL,CACE,MAAM;QACJ,OAAO;UAACP,QAAQ,EAAEM;QAAX,CAAP;MACD,CAHH,EAIE,MAAM,CACJ;MACD,CANH;IAQD,CAZD;EAaD;;EAEDE,MAAM,GAAG;IACP;IACA,oBACE;MAAK,SAAS,EAAC,KAAf;MAAA,wBACE;QAAO,SAAS,EAAC,YAAjB;QAA8B,IAAI,EAAC,QAAnC;QAA4C,WAAW,EAAC,iBAAxD;QAA0E,QAAQ,EAAEC,KAAK,IAAI;UAC3F;UACA,IAAIC,WAAW,GAAGD,KAAK,CAACE,MAAN,CAAaC,KAA/B;UACA,IAAIZ,QAAQ,GAAG,KAAKD,KAAL,CAAWC,QAA1B;UACA,IAAIa,gBAAgB,GAAGb,QAAQ,CAACc,MAAT,CAAgBC,OAAO,IAAIA,OAAO,CAACC,IAAR,CAAaC,QAAb,CAAsBP,WAAtB,CAA3B,CAAvB;UACA,KAAKH,QAAL,CAAc,MAAM;YAClB,OAAO;cAACP,QAAQ,EAAEa;YAAX,CAAP;UACD,CAFD,EAGA,MAAM;YACJK,OAAO,CAACC,GAAR,CAAY,sBAAZ;UACD,CALD;QAMD;MAXD;QAAA;QAAA;QAAA;MAAA,QADF,EAcI,KAAKpB,KAAL,CAAWC,QAAX,CAAoBoB,GAApB,CAAwBL,OAAO,IAAI;QACjC,oBACE;UAAA,uBACE;YAAA,UAAKA,OAAO,CAACC;UAAb;YAAA;YAAA;YAAA;UAAA;QADF,GAAUD,OAAO,CAACM,EAAlB;UAAA;UAAA;UAAA;QAAA,QADF;MAKD,CAND,CAdJ;IAAA;MAAA;MAAA;MAAA;IAAA,QADF;EAyBD;;AAxDyB;;AA4D5B,eAAexB,GAAf"},"metadata":{},"sourceType":"module"}