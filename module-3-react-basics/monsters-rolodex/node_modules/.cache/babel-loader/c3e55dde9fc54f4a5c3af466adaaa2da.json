{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\cristianamateas\\\\Desktop\\\\complete-react-developer\\\\module-3-react-basics\\\\monsters-rolodex\\\\src\\\\App.js\";\nimport { Component } from 'react';\nimport CardList from './components/card-list/card-list.component';\nimport SearchBox from './components/search-box/search-box.component';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor() {\n    super(); // initial state\n\n    this.onSearchChange = event => {\n      // console.log(event); // The event just return information regarding what changed\n      let searchField = event.target.value.toLocaleLowerCase();\n      this.setState(() => {\n        return {\n          searchField\n        }; // same as saying return { searchField: searchField };\n      });\n    };\n\n    this.state = {\n      monsters: [],\n      searchField: ''\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users').then(response => response.json()) // uses what was returned from the previous line of code and parses the text body into a .json format\n    // .then(users => console.log(users)) // after the text was parse, it can then console.log it\n    .then(users => {\n      this.setState(() => {\n        return {\n          monsters: users\n        };\n      });\n    });\n  }\n\n  render() {\n    const {\n      monsters,\n      searchField\n    } = this.state;\n    const {\n      onSearchChange\n    } = this;\n    let filteredMonsters = monsters.filter(monster => {\n      return monster.name.toLocaleLowerCase().includes(searchField);\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(SearchBox, {\n        onChangeHandler: onSearchChange,\n        placeholder: \"search monsters\",\n        className: \"search-box\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CardList, {\n        monsters: filteredMonsters\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"names":["Component","CardList","SearchBox","App","constructor","onSearchChange","event","searchField","target","value","toLocaleLowerCase","setState","state","monsters","componentDidMount","fetch","then","response","json","users","render","filteredMonsters","filter","monster","name","includes"],"sources":["C:/Users/cristianamateas/Desktop/complete-react-developer/module-3-react-basics/monsters-rolodex/src/App.js"],"sourcesContent":["import { Component } from 'react';\n\nimport CardList from './components/card-list/card-list.component';\nimport SearchBox from './components/search-box/search-box.component';\nimport './App.css';\n\nclass App extends Component {\n\n  constructor() {\n    super();\n\n    // initial state\n    this.state = {\n      monsters: [],\n      searchField: ''\n    };\n  };\n\n  componentDidMount() {\n\n    fetch('https://jsonplaceholder.typicode.com/users')\n      \n      .then(response => response.json()) // uses what was returned from the previous line of code and parses the text body into a .json format\n        // .then(users => console.log(users)) // after the text was parse, it can then console.log it\n      \n        .then(users => {\n          this.setState(() => {\n            return {monsters: users};\n          });\n        });\n  };\n\n  onSearchChange = event => {\n    // console.log(event); // The event just return information regarding what changed\n\n    let searchField = event.target.value.toLocaleLowerCase();\n    this.setState(() => {\n      return { searchField }; // same as saying return { searchField: searchField };\n    });\n  }\n\n  render() {\n\n    const { monsters, searchField } = this.state;\n    const { onSearchChange } = this;\n\n    let filteredMonsters = monsters.filter(monster => {return monster.name.toLocaleLowerCase().includes(searchField)});\n\n    return (\n\n      <div className=\"App\">\n\n        {/* When there's a change in the search field, it gets processed here  \n          Returns a new searchField value in the state */}\n        <SearchBox onChangeHandler={onSearchChange} placeholder='search monsters' className='search-box'/>\n\n        {/* Where the filtered monsters actually get rendered onto the page */}\n        <CardList monsters={filteredMonsters} />\n\n      </div>\n      \n    );\n  };\n\n}\n\nexport default App;"],"mappings":";AAAA,SAASA,SAAT,QAA0B,OAA1B;AAEA,OAAOC,QAAP,MAAqB,4CAArB;AACA,OAAOC,SAAP,MAAsB,8CAAtB;AACA,OAAO,WAAP;;;AAEA,MAAMC,GAAN,SAAkBH,SAAlB,CAA4B;EAE1BI,WAAW,GAAG;IACZ,QADY,CAGZ;;IAHY,KAwBdC,cAxBc,GAwBGC,KAAK,IAAI;MACxB;MAEA,IAAIC,WAAW,GAAGD,KAAK,CAACE,MAAN,CAAaC,KAAb,CAAmBC,iBAAnB,EAAlB;MACA,KAAKC,QAAL,CAAc,MAAM;QAClB,OAAO;UAAEJ;QAAF,CAAP,CADkB,CACM;MACzB,CAFD;IAGD,CA/Ba;;IAIZ,KAAKK,KAAL,GAAa;MACXC,QAAQ,EAAE,EADC;MAEXN,WAAW,EAAE;IAFF,CAAb;EAID;;EAEDO,iBAAiB,GAAG;IAElBC,KAAK,CAAC,4CAAD,CAAL,CAEGC,IAFH,CAEQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAFpB,EAEqC;IACjC;IAHJ,CAKKF,IALL,CAKUG,KAAK,IAAI;MACb,KAAKR,QAAL,CAAc,MAAM;QAClB,OAAO;UAACE,QAAQ,EAAEM;QAAX,CAAP;MACD,CAFD;IAGD,CATL;EAUD;;EAWDC,MAAM,GAAG;IAEP,MAAM;MAAEP,QAAF;MAAYN;IAAZ,IAA4B,KAAKK,KAAvC;IACA,MAAM;MAAEP;IAAF,IAAqB,IAA3B;IAEA,IAAIgB,gBAAgB,GAAGR,QAAQ,CAACS,MAAT,CAAgBC,OAAO,IAAI;MAAC,OAAOA,OAAO,CAACC,IAAR,CAAad,iBAAb,GAAiCe,QAAjC,CAA0ClB,WAA1C,CAAP;IAA8D,CAA1F,CAAvB;IAEA,oBAEE;MAAK,SAAS,EAAC,KAAf;MAAA,wBAIE,QAAC,SAAD;QAAW,eAAe,EAAEF,cAA5B;QAA4C,WAAW,EAAC,iBAAxD;QAA0E,SAAS,EAAC;MAApF;QAAA;QAAA;QAAA;MAAA,QAJF,eAOE,QAAC,QAAD;QAAU,QAAQ,EAAEgB;MAApB;QAAA;QAAA;QAAA;MAAA,QAPF;IAAA;MAAA;MAAA;MAAA;IAAA,QAFF;EAcD;;AAxDyB;;AA4D5B,eAAelB,GAAf"},"metadata":{},"sourceType":"module"}