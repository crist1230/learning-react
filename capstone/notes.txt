80. when you see package-lock.json it's basically storing all the versions of
    things you wouldn't want to be messed with when you share your git repo

79. The parameter you put into the component anonymous function will always be
    "props" which is any attribute you include when you call the component

      ex:
      
        const Directory = ( props ) => {
          return (
            <div className='directory-container'>
            {props.categories.map((category) => (
              <CategoryItem key={category.id} category={category} /*these are props*/ />  
            ))} 
            </div> 
          );
        };

83. - routes is a folder that will hold all of our top level components
    - the parent element will still render with the child until we tell it otherwise
    - outlet is the place where the child elements should render

86. Fragment can act like a parent element without actually having to render and element or
    something on the page. Remember, you need one parent element when you're returning HTML
    from a component function because if you have multiple parent elements that's like trying
    to return more than one value from a return call.

105. Contexts
      -these are a special feature that allows you to send info directly to the nodes that   
        need it
      
      ex:
        export const UserProvider = ({ children }) => {
          return <UserContext.Provider>{children}</UserContext.Provider>
        };

        <UserProvider>
          <app /> //this would be the children that get passed into the UserProvider function ^^^
        </UserProvider>

        only the things nested inside the provider will be able to access the context

/////////////////////////////////////////////////////////////////////////////////////////
Hooks

  hooks enable the use of state in functional components. Before you need to use a class
  organizational system to access them, but hooks allow you to "hook into" react state.

  state is a kind of internal memory that stores data relating to a component

what is "export default"?
  basically, if we have a file that has got one thing to export, then we can use a shorthand
  when we are importing the file (look at the link for a side by side comparison of when
  export default vs export is used)
  https://stackoverflow.com/questions/21117160/what-is-export-default-in-javascript //look at answer 2

when do you use async await?
  whenever you're making a call to a db

components are always capitalized (gets this from class syntax)

when do you use .jsx vs .js?
  when you write out a component, use .jsx cuz it's explicitly related to react, for
  everything else, use .js

what is component mounting and unmounting?
  - when a component appears on the dom, it's mounted
    when a component disappears from the dom, it's unmounted

/////////////////////////////////////////////////////////////////////////////////////////
ROUTES
  you can have multiple routes that return the same element, but not that the path may be different
  if you have the routes nested in other routes

  Here's a sandbox to play with:
  https://codesandbox.io/s/optimistic-northcutt-vjckot?file=/src/App.js

  const App = () => {
    return (
      <Routes>
      <Route path='/' element={<Navigation />}>
        <Route index element={<Home />} />
        <Route path='shop' element={<Shop />} /> {/* this is just saying that theres a
        path to /shop and when there's an attempt to access it, show the Shop element. And
        cuz this is a child of a route, the parent route (navigation) will show up no
        matter if you change the path to anything else. This does not make a link to shop 
        magically appear, you have to write that code in the place where you want it to 
        appear. In this case, you would write the code in the navigation element. */}
      </Route>
      </Routes>
    );
  };

/////////////////////////////////////////////////////////////////////////////////////////
AUTHENTICATION FLOW
  Here's links I found useful for explaining it:
    Lecture 89
    https://www.youtube.com/watch?v=BNEoKexlmA4&t=105s

/////////////////////////////////////////////////////////////////////////////////////////
FIREBASE
  -basically a database like mongodb

/////////////////////////////////////////////////////////////////////////////////////////
CONTEXTS
  - allow you to store certain things separately outside of a component and just call the
    variable wherever you need it instead of it going through props
  - Lecture 104

  - basically a database

  - so the thing with the provider, you could be providing multiple contexts
    to the app element (which means ur passing down the state and setterState),
    but a certain js file doesn't know which one you want to use, so, in that file,
    you have to call useContext (so it knows it's looking for something provided
    to the file) and then in () you put the context you want to access

/////////////////////////////////////////////////////////////////////////////////////////
PROP DRILLING VS CONTEXTS
  - if you have a state declared in your app component and want to pass down that state
    so it's usable in a child component, you would have to pass the state down as a prop
    to every child component in between the app and the component you want to use the 
    state in

    Example with PD: https://codesandbox.io/s/prop-drilling-example-01rbb8?file=/src/App.js
    Example with Contexts: https://codesandbox.io/s/contexts-example-unhbek?file=/src/App.js

    good explanation: https://www.youtube.com/watch?v=sP7ANcTpJr8

/////////////////////////////////////////////////////////////////////////////////////////
REDUCERS
  - Lecture 145
    - reducers are functions that return a new object you want to store
    - whenever you call the dispatch function, you pass an action object (with type & payload)
    - when you call useReducer, it will always return the currentState and a dispatch function
    - the dispatch function is what actually runs the reducer with the certain set parameters
  - Lecture 146
    - only store readable values (no functions)

  EXAMPLE
    /* Think of this as the currentState, you only want the currentUser to change,
    * but you still want the other properties (like firstName & lastName), and
    * remember that reducers return NEW objects, so if you want to keep the same
    * values you have to pass/spread that into the new object */
    const currentState = {
      currentUser: googleAuthObj,
      firstName: 'Debby',
      lastName: 'Mocan'
    };
    
    // the reducer gives you the parameters
    const userReducer = (currentState, action) = {
      const { typeOfAction, payload } = action; // payload === the new value (ie: change the currentUser to this...)

      switch(type) {
        case SET_CURRENT_USER:
          return {
            ...currentState, 
            currentUser: payload
          }
        default
          throw new Error('Error');
      }
    };

    // when the application is initialized, what the values will be set to
    const initialState = {
      currentState: null,
      firstName: '',
      lastName: ''
    };

    // state === the current value being stored in the reducer (not necessarily the initialState)
    const [state, dispatch] = useReducer(userReducer, initialState);

    const { currentUser, firstName, lastName } = state;

    const setCurrentUser = (user) => {
      certainAction = { type: SET_CURRENT_USER, payload: user };
      dispatch(certainAction);
    };

/////////////////////////////////////////////////////////////////////////////////////////
REDUX
  Lecture 149
  - with context, you can choose individually what components have access, with redux,
    the entire application gets access
  
  Lecture 151
  - all the reducers go into one "root-reducer" and whenever an action is dispatched,
    it will go through all the reducers in the root reducer
    > this is why the default states of the reducers have been changed from an error 
      to the state that was passed in so that if an action that gets dispatched doesn't
      apply to a certain reducer, it will just return the passed in state

/////////////////////////////////////////////////////////////////////////////////////////
REDUX-SAGA
  Lecture 172
  - saga is a middleware, but it gets called after the action is dispatched and goes
    through the reducers
  - sagas replace thunks cuz you mainly want one async side-effect library

  Lecture 173
  - look at this for more info on generator functions

/////////////////////////////////////////////////////////////////////////////////////////
ADVANCED TYPESCRIPT
  - Generics
    > https://www.youtube.com/watch?v=nViEqpgwxHE
    > https://www.youtube.com/watch?v=nePDL5lQSE4

    > CODE:
      function identity<TypeOfItem>(arg: TypeOfItem): TypeOfItem {
        return arg;
      }

      (let output = identity<string>("myString");) == (let output = identity("myString");)